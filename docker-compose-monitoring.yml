networks:
  t2_proxy:
    external: true
services:
  grafana:
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: $GRAFANA_PASSWORD
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://localhost:3000/api/health
      timeout: 10s
    image: grafana/grafana:latest
    labels:
    - sablier.enable=true
    - sablier.group=mygroup
    - traefik.enable=true
    - traefik.http.routers.grafana-rtr.entrypoints=https
    - traefik.http.routers.grafana-rtr.rule=Host(`grafana.${DOMAINNAME_CLOUD_SERVER}`)
    - traefik.http.routers.grafana-rtr.middlewares=chain-oauth@file
    - traefik.http.routers.grafana-rtr.service=grafana-svc
    - traefik.http.services.grafana-svc.loadbalancer.server.port=3000
    - homepage.group=Monitoring
    - homepage.name=Grafana
    - homepage.icon=grafana.png
    - homepage.href=https://grafana.${DOMAINNAME_CLOUD_SERVER}
    - homepage.description=Metrics dashboard
    - homepage.weight=1
    logging:
      driver: json-file
      options:
        max-file: "3"
        max-size: 10m
        tag: '{{.Name}}'
    networks:
    - t2_proxy
    ports:
    - ${GRAFANA_PORT:-3000}:3000
    profiles:
    - monitoring
    - all
    restart: unless-stopped
    volumes:
    - ${DOCKERDIR:-/opt/docker}/appdata/grafana:/var/lib/grafana
  influxdb:
    container_name: influxdb
    environment:
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: $INFLUXDB_TOKEN
      DOCKER_INFLUXDB_INIT_BUCKET: $INFLUXDB_BUCKET
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_ORG: $INFLUXDB_ORG
      DOCKER_INFLUXDB_INIT_PASSWORD: $INFLUXDB_PASSWORD
      DOCKER_INFLUXDB_INIT_USERNAME: $INFLUXDB_USERNAME
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test:
      - CMD
      - influx
      - ping
      timeout: 10s
    image: influxdb:2.7
    labels:
    - sablier.enable=true
    - sablier.group=mygroup
    - traefik.enable=true
    - traefik.http.routers.influxdb-rtr.entrypoints=https
    - traefik.http.routers.influxdb-rtr.rule=Host(`influxdb.${DOMAINNAME_CLOUD_SERVER}`)
    - traefik.http.routers.influxdb-rtr.middlewares=chain-oauth@file
    - traefik.http.routers.influxdb-rtr.service=influxdb-svc
    - traefik.http.services.influxdb-svc.loadbalancer.server.port=8086
    - homepage.group=Monitoring
    - homepage.name=InfluxDB
    - homepage.icon=influxdb.png
    - homepage.href=https://influxdb.${DOMAINNAME_CLOUD_SERVER}
    - homepage.description=Time series database
    - homepage.weight=3
    logging:
      driver: json-file
      options:
        max-file: "3"
        max-size: 10m
        tag: '{{.Name}}'
    networks:
    - t2_proxy
    ports:
    - ${INFLUXDB_PORT:-8086}:8086
    profiles:
    - monitoring
    - all
    restart: unless-stopped
    volumes:
    - ${DOCKERDIR:-/opt/docker}/appdata/influxdb:/var/lib/influxdb2
  loki:
    command: -config.file=/etc/loki/local-config.yaml
    container_name: loki
    environment:
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://localhost:3100/ready
      timeout: 10s
    image: grafana/loki:latest
    labels:
    - sablier.enable=true
    - sablier.group=mygroup
    - traefik.enable=true
    - traefik.http.routers.loki-rtr.entrypoints=https
    - traefik.http.routers.loki-rtr.rule=Host(`loki.${DOMAINNAME_CLOUD_SERVER}`)
    - traefik.http.routers.loki-rtr.middlewares=chain-oauth@file
    - traefik.http.routers.loki-rtr.service=loki-svc
    - traefik.http.services.loki-svc.loadbalancer.server.port=3100
    - homepage.group=Monitoring
    - homepage.name=Loki
    - homepage.icon=loki.png
    - homepage.href=https://loki.${DOMAINNAME_CLOUD_SERVER}
    - homepage.description=Log aggregation
    - homepage.weight=4
    logging:
      driver: json-file
      options:
        max-file: "3"
        max-size: 10m
        tag: '{{.Name}}'
    networks:
    - t2_proxy
    ports:
    - ${LOKI_PORT:-3100}:3100
    profiles:
    - monitoring
    - all
    restart: unless-stopped
    volumes:
    - ${DOCKERDIR:-/opt/docker}/appdata/loki:/etc/loki
  netdata:
    container_name: netdata
    environment:
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://localhost:19999/
      timeout: 10s
    image: netdata/netdata:latest
    labels:
    - sablier.enable=true
    - sablier.group=mygroup
    - traefik.enable=true
    - traefik.http.routers.netdata-rtr.entrypoints=https
    - traefik.http.routers.netdata-rtr.rule=Host(`netdata.${DOMAINNAME_CLOUD_SERVER}`)
    - traefik.http.routers.netdata-rtr.middlewares=chain-oauth@file
    - traefik.http.routers.netdata-rtr.service=netdata-svc
    - traefik.http.services.netdata-svc.loadbalancer.server.port=19999
    - homepage.group=Monitoring
    - homepage.name=Netdata
    - homepage.icon=netdata.png
    - homepage.href=https://netdata.${DOMAINNAME_CLOUD_SERVER}
    - homepage.description=System monitoring
    - homepage.weight=6
    logging:
      driver: json-file
      options:
        max-file: "3"
        max-size: 10m
        tag: '{{.Name}}'
    networks:
    - t2_proxy
    ports:
    - ${NETDATA_PORT:-19999}:19999
    profiles:
    - monitoring
    - all
    restart: unless-stopped
    volumes:
    - ${DOCKERDIR:-/opt/docker}/appdata/netdata:/var/lib/netdata
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /etc/passwd:/host/etc/passwd:ro
    - /etc/group:/host/etc/group:ro
    - /etc/localtime:/etc/localtime:ro
  prometheus:
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --web.console.templates=/etc/prometheus/consoles
    - --storage.tsdb.retention.time=200h
    - --web.enable-lifecycle
    container_name: prometheus
    environment:
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://localhost:9090/-/healthy
      timeout: 10s
    image: prom/prometheus:latest
    labels:
    - sablier.enable=true
    - sablier.group=mygroup
    - traefik.enable=true
    - traefik.http.routers.prometheus-rtr.entrypoints=https
    - traefik.http.routers.prometheus-rtr.rule=Host(`prometheus.${DOMAINNAME_CLOUD_SERVER}`)
    - traefik.http.routers.prometheus-rtr.middlewares=chain-oauth@file
    - traefik.http.routers.prometheus-rtr.service=prometheus-svc
    - traefik.http.services.prometheus-svc.loadbalancer.server.port=9090
    - homepage.group=Monitoring
    - homepage.name=Prometheus
    - homepage.icon=prometheus.png
    - homepage.href=https://prometheus.${DOMAINNAME_CLOUD_SERVER}
    - homepage.description=Metrics collection
    - homepage.weight=2
    logging:
      driver: json-file
      options:
        max-file: "3"
        max-size: 10m
        tag: '{{.Name}}'
    networks:
    - t2_proxy
    ports:
    - ${PROMETHEUS_PORT:-9090}:9090
    profiles:
    - monitoring
    - all
    restart: unless-stopped
    volumes:
    - ${DOCKERDIR:-/opt/docker}/appdata/prometheus:/etc/prometheus
    - ${DOCKERDIR:-/opt/docker}/appdata/prometheus/data:/prometheus
  promtail:
    command: -config.file=/etc/promtail/config.yml
    container_name: promtail
    environment:
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test:
      - CMD
      - pgrep
      - promtail
      timeout: 10s
    image: grafana/promtail:latest
    logging:
      driver: json-file
      options:
        max-file: "3"
        max-size: 10m
        tag: '{{.Name}}'
    networks:
    - t2_proxy
    profiles:
    - monitoring
    - all
    restart: unless-stopped
    volumes:
    - ${DOCKERDIR:-/opt/docker}/appdata/promtail:/etc/promtail
    - /var/log:/var/log
    - /var/lib/docker/containers:/var/lib/docker/containers:ro
  uptime-kuma:
    container_name: uptime-kuma
    environment:
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://localhost:3001/
      timeout: 10s
    image: louislam/uptime-kuma:latest
    labels:
    - sablier.enable=true
    - sablier.group=mygroup
    - traefik.enable=true
    - traefik.http.routers.uptime-kuma-rtr.entrypoints=https
    - traefik.http.routers.uptime-kuma-rtr.rule=Host(`uptime.${DOMAINNAME_CLOUD_SERVER}`)
    - traefik.http.routers.uptime-kuma-rtr.middlewares=chain-oauth@file
    - traefik.http.routers.uptime-kuma-rtr.service=uptime-kuma-svc
    - traefik.http.services.uptime-kuma-svc.loadbalancer.server.port=3001
    - homepage.group=Monitoring
    - homepage.name=Uptime Kuma
    - homepage.icon=uptime-kuma.png
    - homepage.href=https://uptime.${DOMAINNAME_CLOUD_SERVER}
    - homepage.description=Uptime monitoring
    - homepage.weight=5
    logging:
      driver: json-file
      options:
        max-file: "3"
        max-size: 10m
        tag: '{{.Name}}'
    networks:
    - t2_proxy
    ports:
    - ${UPTIME_KUMA_PORT:-3001}:3001
    profiles:
    - monitoring
    - all
    restart: unless-stopped
    volumes:
    - ${DOCKERDIR:-/opt/docker}/appdata/uptime-kuma:/app/data
