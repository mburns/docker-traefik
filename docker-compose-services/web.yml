# Web Services
# Web applications, browsers, and development tools


networks:
  t2_proxy:
    external: true

services:
  # Firefox - Web Browser
  firefox:
    image: lscr.io/linuxserver/firefox:latest
    container_name: firefox
    restart: unless-stopped
    profiles: ["web", "all"]
    networks:
      - t2_proxy
    ports:
      - "${FIREFOX_PORT:-3000}:3000"
    volumes:
      - ${DOCKERDIR:-/opt/docker}/appdata/firefox:/config
    environment:
      TZ: ${TZ:-UTC}
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"
    labels:
      - sablier.enable=true
      - sablier.group=mygroup
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.firefox-rtr.entrypoints=https"
      - "traefik.http.routers.firefox-rtr.rule=Host(`firefox.${DOMAINNAME_CLOUD_SERVER}`)"
      ## Middlewares
      - "traefik.http.routers.firefox-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.firefox-rtr.service=firefox-svc"
      - "traefik.http.services.firefox-svc.loadbalancer.server.port=3000"
      ## Homepage
      - homepage.group=Web
      - homepage.name=Firefox
      - homepage.icon=firefox.png
      - homepage.href=https://firefox.${DOMAINNAME_CLOUD_SERVER}
      - homepage.description=Web browser
      - homepage.weight=1

  # VSCode - Code Editor
  vscode:
    image: lscr.io/linuxserver/code-server:latest
    container_name: vscode
    restart: unless-stopped
    profiles: ["web", "all"]
    networks:
      - t2_proxy
    ports:
      - "${VSCODE_PORT:-8443}:8443"
    volumes:
      - ${DOCKERDIR:-/opt/docker}/appdata/vscode:/config
      - ${DATADIR:-/data}:/data
    environment:
      TZ: ${TZ:-UTC}
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      PASSWORD: $VSCODE_PASSWORD
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8443/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"
    labels:
      - sablier.enable=true
      - sablier.group=mygroup
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.vscode-rtr.entrypoints=https"
      - "traefik.http.routers.vscode-rtr.rule=Host(`vscode.${DOMAINNAME_CLOUD_SERVER}`)"
      ## Middlewares
      - "traefik.http.routers.vscode-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.vscode-rtr.service=vscode-svc"
      - "traefik.http.services.vscode-svc.loadbalancer.server.port=8443"
      ## Homepage
      - homepage.group=Web
      - homepage.name=VSCode
      - homepage.icon=vscode.png
      - homepage.href=https://vscode.${DOMAINNAME_CLOUD_SERVER}
      - homepage.description=Code editor
      - homepage.weight=2

  # Portainer - Container Management
  # portainer:
  #   image: portainer/portainer-ce:latest
  #   container_name: portainer
  #   restart: unless-stopped
  #   profiles: ["web", "all"]
  #   networks:
  #     - t2_proxy
  #     - socket_proxy
  #   ports:
  #     - "${PORTAINER_PORT:-9000}:9000"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ${DOCKERDIR:-/opt/docker}/appdata/portainer:/data
  #   environment:
  #     TZ: ${TZ:-UTC}
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"
  #       tag: "{{.Name}}"
  #   labels:
  #     - sablier.enable=true
  #     - sablier.group=mygroup
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.portainer-rtr.entrypoints=https"
  #     - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.${DOMAINNAME_CLOUD_SERVER}`)"
  #     ## Middlewares
  #     - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.portainer-rtr.service=portainer-svc"
  #     - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"
  #     ## Homepage
  #     - homepage.group=Admin
  #     - homepage.name=Portainer
  #     - homepage.icon=portainer.png
  #     - homepage.href=https://portainer.${DOMAINNAME_CLOUD_SERVER}
  #     - homepage.description=Container management
  #     - homepage.weight=1

  # Watchtower - Container Updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    profiles: ["web", "all"]
    networks:
      - socket_proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: ${TZ:-UTC}
      DOCKER_HOST: tcp://socket-proxy:2375
    command:
      - --cleanup
      - --schedule=0 0 2 * * *
      - --label-enable
      - --include-stopped
      - --revive-stopped
      - --remove-volumes
      - --notifications=shoutrrr
      - --notification-url=$WATCHTOWER_NOTIFICATION_URL
    healthcheck:
      test: ["CMD", "pgrep", "watchtower"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"

  # Nginx Proxy Manager - Alternative Reverse Proxy
  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx-proxy-manager
    restart: unless-stopped
    profiles: ["web", "all"]
    networks:
      - t2_proxy
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ${DOCKERDIR:-/opt/docker}/appdata/nginx-proxy-manager:/data
      - ${DOCKERDIR:-/opt/docker}/appdata/nginx-proxy-manager/letsencrypt:/etc/letsencrypt
    environment:
      TZ: ${TZ:-UTC}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:81/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"
    labels:
      - sablier.enable=true
      - sablier.group=mygroup
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.nginx-proxy-manager-rtr.entrypoints=https"
      - "traefik.http.routers.nginx-proxy-manager-rtr.rule=Host(`npm.${DOMAINNAME_CLOUD_SERVER}`)"
      ## Middlewares
      - "traefik.http.routers.nginx-proxy-manager-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.nginx-proxy-manager-rtr.service=nginx-proxy-manager-svc"
      - "traefik.http.services.nginx-proxy-manager-svc.loadbalancer.server.port=81"
      ## Homepage
      - homepage.group=Admin
      - homepage.name=Nginx Proxy Manager
      - homepage.icon=nginx-proxy-manager.png
      - homepage.href=https://npm.${DOMAINNAME_CLOUD_SERVER}
      - homepage.description=Alternative reverse proxy
      - homepage.weight=2 

  freshrss:
    image: freshrss/freshrss:latest
    container_name: freshrss
    hostname: freshrss
    restart: unless-stopped
    profiles: ["tools", "web", "all"]
    # Optional build section if you want to build the image locally:
    # build:
    #   # Pick #latest (stable release) or #edge (rolling release) or a specific release like #1.21.0
    #   context: https://github.com/FreshRSS/FreshRSS.git#latest
    #   dockerfile: Docker/Dockerfile-Alpine
    logging:
      options:
        max-size: 10m
    volumes:
      - ${DOCKERDIR:-/opt/docker}/appdata/freshrss:/var/www/FreshRSS/data
      # - $DATADIR/media:/var/www/FreshRSS/data
      - ${DOCKERDIR:-/opt/docker}/appdata/freshrss/extensions:/var/www/FreshRSS/extensions
    environment:
      TZ: ${TZ:-UTC}
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      CRON_MIN: '3,33'
      TRUSTED_PROXY: 172.16.0.1/12 192.168.0.1/16 10.0.0.0/8
    networks:
      - t2_proxy
    ports:
      - "8765:80"
    labels:
      - sablier.enable=true
      - sablier.group=mygroup
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.freshrss-rtr.entrypoints=https"
      - "traefik.http.routers.freshrss-rtr.rule=Host(`freshrss.${DOMAINNAME_CLOUD_SERVER}`)"
      ## Middlewares
      - "traefik.http.routers.freshrss-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.freshrss-rtr.service=freshrss-svc"
      - "traefik.http.services.freshrss-svc.loadbalancer.server.port=80"
      ## Homepage
      - homepage.group=Tools
      - homepage.name=FreshRSS
      - homepage.icon=freshrss.png
      - homepage.href=https://freshrss.${DOMAINNAME_CLOUD_SERVER}
      - homepage.description=Blog feeds
      - homepage.weight=4
      # - homepage.widget.type=freshrss
      # - homepage.widget.url=http://freshrss:8765
      # - homepage.widget.key=${FRESHRSS_API_KEY}

  # FlareSolverr - Proxy server to bypass Cloudflare protection
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    profiles: ["tools", "all"]
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.160
    environment:
    - LOG_LEVEL=${LOG_LEVEL:-info}
    - LOG_HTML=${LOG_HTML:-false}
    - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
    - TZ=${TZ:-UTC}
    # ports:
    #  - "8191:8191"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.flaresolverr-rtr.entrypoints=https"
      - "traefik.http.routers.flaresolverr-rtr.rule=Host(`flaresolverr.${DOMAINNAME_CLOUD_SERVER}`)"
      - "traefik.http.routers.flaresolverr-rtr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.flaresolverr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.flaresolverr-rtr.service=flaresolverr-svc"
      - "traefik.http.services.flaresolverr-svc.loadbalancer.server.port=8191"

  # lounge - irc client
  lounge:
    image: ghcr.io/thelounge/thelounge:latest
    container_name: lounge
    profiles: ["tools", "all"]
    networks:
      - t2_proxy
    ports:
      - "9003:9000"
    restart: always
    volumes:
      - ${DOCKERDIR:-/opt/docker}/appdata/lounge:/var/opt/thelounge
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.lounge-rtr.entrypoints=https"
      - "traefik.http.routers.lounge-rtr.rule=Host(`lounge.${DOMAINNAME_CLOUD_SERVER}`)"
      ## Middlewares
      - "traefik.http.routers.lounge-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.lounge-rtr.service=lounge-svc"
      - "traefik.http.services.lounge-svc.loadbalancer.server.port=9000"

  # password manager
  # https://www.techaddressed.com/tutorials/vaultwarden-docker-compose/#smtp-email-account
  vaultwarden:
    container_name: vaultwarden
    image: vaultwarden/server:latest
    profiles: ["tools", "all"]
    networks:
      - t2_proxy
    restart: unless-stopped
    volumes:
      - ${DOCKERDIR:-/opt/docker}/appdata/vaultwarden:/data
    ports:
      - 9991:80
    environment:
      - DOMAIN=https://vaultwarden.${DOMAINNAME_CLOUD_SERVER}
      - LOGIN_RATELIMIT_MAX_BURST=10
      - LOGIN_RATELIMIT_SECONDS=60
      - ADMIN_RATELIMIT_MAX_BURST=10
      - ADMIN_RATELIMIT_SECONDS=60
      - ADMIN_TOKEN=$VAULTWARDEN_TOKEN
      - SENDS_ALLOWED=true
      - EMERGENCY_ACCESS_ALLOWED=true
      - WEB_VAULT_ENABLED=true
    labels:
      - "sablier.enable=true"
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.vaultwarden-rtr.entrypoints=https"
      - "traefik.http.routers.vaultwarden-rtr.rule=Host(`vaultwarden.${DOMAINNAME_CLOUD_SERVER}`)"
      ## Middlewares
      - "traefik.http.routers.vaultwarden-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.vaultwarden-rtr.service=vaultwarden-svc"
      - "traefik.http.services.vaultwarden-svc.loadbalancer.server.port=80"

  # https://github.com/benbusby/whoogle-search/blob/main/docker-compose-traefik.yaml
  whoogle:
    image: ${WHOOGLE_IMAGE:-benbusby/whoogle-search}
    container_name: whoogle
    restart: unless-stopped
    pids_limit: 50
    mem_limit: 256mb
    memswap_limit: 256mb
    profiles: ["tools", "all"]
    # user debian-tor from tor package
    user: whoogle
    # security_opt:
    #   - no-new-privileges
    # cap_drop:
    #   - ALL
    networks:
      - t2_proxy
    tmpfs:
      - /config/:size=10M,uid=927,gid=927,mode=1700
      # - /var/lib/tor/:size=15M,uid=927,gid=927,mode=1700
      # - /run/tor/:size=1M,uid=927,gid=927,mode=1700
    environment: # Uncomment to configure environment variables
      # Site alternative configurations, uncomment to enable
      # Note: If not set, the feature will still be available
      # with default values.
      - WHOOGLE_ALT_TW=farside.link/nitter
      - WHOOGLE_ALT_YT=farside.link/invidious
      - WHOOGLE_ALT_IG=farside.link/bibliogram/u
      - WHOOGLE_ALT_RD=farside.link/libreddit
      - WHOOGLE_ALT_MD=farside.link/scribe
      - WHOOGLE_ALT_TL=farside.link/lingva
      - WHOOGLE_ALT_IMG=farside.link/rimgo
      - WHOOGLE_ALT_WIKI=farside.link/wikiless
      - WHOOGLE_ALT_IMDB=farside.link/libremdb
      - WHOOGLE_ALT_QUORA=farside.link/quetre
      - WHOOGLE_CONFIG_DISABLE=1
      - WHOOGLE_CONFIG_SEARCH_LANGUAGE=lang_en
      - WHOOGLE_CONFIG_GET_ONLY=1
      - WHOOGLE_CONFIG_COUNTRY=US
      - WHOOGLE_CONFIG_PREFERENCES_ENCRYPTED=1
      # - WHOOGLE_CONFIG_PREFERENCES_KEY="NEEDS_TO_BE_MODIFIED"
    # env_file: # Alternatively, load variables from whoogle.env
    #   - whoogle.env
    ports:
      - 8202:5000
    labels:
      - sablier.enable=true
      - sablier.group=mygroup
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.whoogle-rtr.entrypoints=https"
      - "traefik.http.routers.whoogle-rtr.rule=Host(`whoogle.${DOMAINNAME_CLOUD_SERVER}`)"
      ## Middlewares
      - "traefik.http.routers.whoogle-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.whoogle-rtr.service=whoogle-svc"
      - "traefik.http.services.whoogle-svc.loadbalancer.server.port=5000"
      ## Homepage
      - homepage.group=Tools
      - homepage.name=Whoogle
      - homepage.icon=whoogle.png
      - homepage.href=https://whoogle.${DOMAINNAME_CLOUD_SERVER}
      - homepage.description=Google proxy
      # - homepage.weight=2
