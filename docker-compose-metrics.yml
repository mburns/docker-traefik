# services:
  # grafana:
  #   container_name: grafana
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: $GRAFANA_PASSWORD
  #     TZ: ${TZ:-UTC}
  #   healthcheck:
  #     interval: 30s
  #     retries: 3
  #     start_period: 40s
  #     test:
  #     - CMD
  #     - wget
  #     - --no-verbose
  #     - --tries=1
  #     - --spider
  #     - http://localhost:3000/api/health
  #     timeout: 10s
  #   image: grafana/grafana:latest
  #   labels:
  #   - sablier.enable=true
  #   - sablier.group=mygroup
  #   - traefik.enable=true
  #   - traefik.http.routers.grafana-rtr.entrypoints=https
  #   - traefik.http.routers.grafana-rtr.rule=Host(`grafana.${DOMAINNAME_CLOUD_SERVER}`)
  #   - traefik.http.routers.grafana-rtr.middlewares=chain-oauth@file
  #   - traefik.http.routers.grafana-rtr.service=grafana-svc
  #   - traefik.http.services.grafana-svc.loadbalancer.server.port=3000
  #   - homepage.group=Monitoring
  #   - homepage.name=Grafana
  #   - homepage.icon=grafana.png
  #   - homepage.href=https://grafana.${DOMAINNAME_CLOUD_SERVER}
  #   - homepage.description=Metrics dashboard
  #   - homepage.weight=1
  #   logging:
  #     driver: json-file
  #     options:
  #       max-file: "3"
  #       max-size: 10m
  #       tag: '{{.Name}}'
  #   networks:
  #   - t2_proxy
  #   ports:
  #   - ${GRAFANA_PORT:-3000}:3000
  #   profiles:
  #   - monitoring
  #   - all
  #   restart: unless-stopped
  #   volumes:
  #   - ${DOCKERDIR:-/opt/docker}/appdata/grafana:/var/lib/grafana

  # influxdb:
  #   container_name: influxdb
  #   environment:
  #     DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: $INFLUXDB_TOKEN
  #     DOCKER_INFLUXDB_INIT_BUCKET: $INFLUXDB_BUCKET
  #     DOCKER_INFLUXDB_INIT_MODE: setup
  #     DOCKER_INFLUXDB_INIT_ORG: $INFLUXDB_ORG
  #     DOCKER_INFLUXDB_INIT_PASSWORD: $INFLUXDB_PASSWORD
  #     DOCKER_INFLUXDB_INIT_USERNAME: $INFLUXDB_USERNAME
  #     TZ: ${TZ:-UTC}
  #   healthcheck:
  #     interval: 30s
  #     retries: 3
  #     start_period: 40s
  #     test:
  #     - CMD
  #     - influx
  #     - ping
  #     timeout: 10s
  #   image: influxdb:2.7
  #   labels:
  #   - sablier.enable=true
  #   - sablier.group=mygroup
  #   - traefik.enable=true
  #   - traefik.http.routers.influxdb-rtr.entrypoints=https
  #   - traefik.http.routers.influxdb-rtr.rule=Host(`influxdb.${DOMAINNAME_CLOUD_SERVER}`)
  #   - traefik.http.routers.influxdb-rtr.middlewares=chain-oauth@file
  #   - traefik.http.routers.influxdb-rtr.service=influxdb-svc
  #   - traefik.http.services.influxdb-svc.loadbalancer.server.port=8086
  #   - homepage.group=Monitoring
  #   - homepage.name=InfluxDB
  #   - homepage.icon=influxdb.png
  #   - homepage.href=https://influxdb.${DOMAINNAME_CLOUD_SERVER}
  #   - homepage.description=Time series database
  #   - homepage.weight=3
  #   logging:
  #     driver: json-file
  #     options:
  #       max-file: "3"
  #       max-size: 10m
  #       tag: '{{.Name}}'
  #   networks:
  #   - t2_proxy
  #   ports:
  #   - ${INFLUXDB_PORT:-8086}:8086
  #   profiles:
  #   - monitoring
  #   - all
  #   restart: unless-stopped
  #   volumes:
  #   - ${DOCKERDIR:-/opt/docker}/appdata/influxdb:/var/lib/influxdb2

#   lidarr-exporter:
#     container_name: lidarr-exporter
#     command:
#     - lidarr
#     environment:
#       APIKEY: $LIDARR_API_KEY
#       ENABLE_ADDITIONAL_METRICS: true
#       PORT: 9709
#       URL: http://lidarr:8686
#     image: ghcr.io/onedr0p/exportarr:latest
#     networks:
#     - t2_proxy
#     ports:
#     - 9709:9709
#     profiles:
#     - all
#     - media
#     - arrs
#     restart: "no"

#   node-exporter:
#     command:
#     - --path.procfs=/host/proc
#     - --path.sysfs=/host/sys
#     - --collector.filesystem.ignored-mount-points
#     # - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
#     container_name: node-exporter
#     image: prom/node-exporter:latest
#     networks:
#     - t2_proxy
#     ports:
#     - 9100:9100
#     profiles:
#     - monitoring
#     - all
#     restart: unless-stopped
#     volumes:
#     - /proc:/host/proc:ro
#     - /sys:/host/sys:ro
#     - /:/rootfs:ro

  # prometheus:
  #   command:
  #   - --config.file=/etc/prometheus/prometheus.yml
  #   - --storage.tsdb.path=/prometheus
  #   - --web.console.libraries=/etc/prometheus/console_libraries
  #   - --web.console.templates=/etc/prometheus/consoles
  #   - --storage.tsdb.retention.time=200h
  #   - --web.enable-lifecycle
  #   container_name: prometheus
  #   environment:
  #     TZ: ${TZ:-UTC}
  #   healthcheck:
  #     interval: 30s
  #     retries: 3
  #     start_period: 40s
  #     test:
  #     - CMD
  #     - wget
  #     - --no-verbose
  #     - --tries=1
  #     - --spider
  #     - http://localhost:9090/-/healthy
  #     timeout: 10s
  #   image: prom/prometheus:latest
  #   labels:
  #   - sablier.enable=true
  #   - sablier.group=mygroup
  #   - traefik.enable=true
  #   - traefik.http.routers.prometheus-rtr.entrypoints=https
  #   - traefik.http.routers.prometheus-rtr.rule=Host(`prometheus.${DOMAINNAME_CLOUD_SERVER}`)
  #   - traefik.http.routers.prometheus-rtr.middlewares=chain-oauth@file
  #   - traefik.http.routers.prometheus-rtr.service=prometheus-svc
  #   - traefik.http.services.prometheus-svc.loadbalancer.server.port=9090
  #   - homepage.group=Monitoring
  #   - homepage.name=Prometheus
  #   - homepage.icon=prometheus.png
  #   - homepage.href=https://prometheus.${DOMAINNAME_CLOUD_SERVER}
  #   - homepage.description=Metrics collection
  #   - homepage.weight=2
  #   logging:
  #     driver: json-file
  #     options:
  #       max-file: "3"
  #       max-size: 10m
  #       tag: '{{.Name}}'
  #   networks:
  #   - t2_proxy
  #   ports:
  #   - ${PROMETHEUS_PORT:-9090}:9090
  #   profiles:
  #   - monitoring
  #   - all
  #   restart: unless-stopped
  #   volumes:
  #   - ${DOCKERDIR:-/opt/docker}/appdata/prometheus:/etc/prometheus
  #   - ${DOCKERDIR:-/opt/docker}/appdata/prometheus/data:/prometheus

  loki:
    command: -config.file=/etc/loki/local-config.yaml
    container_name: loki
    environment:
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://localhost:3100/ready
      timeout: 10s
    image: grafana/loki:latest
    labels:
    - sablier.enable=true
    - sablier.group=mygroup
    - traefik.enable=true
    - traefik.http.routers.loki-rtr.entrypoints=https
    - traefik.http.routers.loki-rtr.rule=Host(`loki.${DOMAINNAME_CLOUD_SERVER}`)
    - traefik.http.routers.loki-rtr.middlewares=chain-oauth@file
    - traefik.http.routers.loki-rtr.service=loki-svc
    - traefik.http.services.loki-svc.loadbalancer.server.port=3100
    - homepage.group=Monitoring
    - homepage.name=Loki
    - homepage.icon=loki.png
    - homepage.href=https://loki.${DOMAINNAME_CLOUD_SERVER}
    - homepage.description=Log aggregation
    - homepage.weight=4
    logging:
      driver: json-file
      options:
        max-file: "3"
        max-size: 10m
        tag: '{{.Name}}'
    networks:
    - t2_proxy
    ports:
    - ${LOKI_PORT:-3100}:3100
    profiles:
    - monitoring
    - all
    restart: unless-stopped
    volumes:
    - ${DOCKERDIR:-/opt/docker}/appdata/loki:/etc/loki

  netdata:
    container_name: netdata
    environment:
      TZ: ${TZ:-UTC}
    # healthcheck:
    #   interval: 30s
    #   retries: 3
    #   start_period: 40s
    #   test:
    #   - CMD
    #   - wget
    #   - --no-verbose
    #   - --tries=1
    #   - --spider
    #   - http://localhost:19999/
    #   timeout: 10s
    image: netdata/netdata:latest
    labels:
    - sablier.enable=true
    - sablier.group=mygroup
    - traefik.enable=true
    - traefik.http.routers.netdata-rtr.entrypoints=https
    - traefik.http.routers.netdata-rtr.rule=Host(`netdata.${DOMAINNAME_CLOUD_SERVER}`)
    - traefik.http.routers.netdata-rtr.middlewares=chain-oauth@file
    - traefik.http.routers.netdata-rtr.service=netdata-svc
    - traefik.http.services.netdata-svc.loadbalancer.server.port=19999
    - homepage.group=Monitoring
    - homepage.name=Netdata
    - homepage.icon=netdata.png
    - homepage.href=https://netdata.${DOMAINNAME_CLOUD_SERVER}
    - homepage.description=System monitoring
    - homepage.weight=6
    logging:
      driver: json-file
      options:
        max-file: "3"
        max-size: 10m
        tag: '{{.Name}}'
    networks:
    - t2_proxy
    ports:
    - ${NETDATA_PORT:-19999}:19999
    profiles:
    - monitoring
    - all
    restart: unless-stopped
    volumes:
    - ${DOCKERDIR:-/opt/docker}/appdata/netdata:/var/lib/netdata
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /etc/passwd:/host/etc/passwd:ro
    - /etc/group:/host/etc/group:ro
    - /etc/localtime:/etc/localtime:ro

  promtail:
    command: -config.file=/etc/promtail/config.yml
    container_name: promtail
    environment:
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test:
      - CMD
      - pgrep
      - promtail
      timeout: 10s
    image: grafana/promtail:latest
    logging:
      driver: json-file
      options:
        max-file: "3"
        max-size: 10m
        tag: '{{.Name}}'
    networks:
    - t2_proxy
    profiles:
    - monitoring
    - all
    restart: unless-stopped
    volumes:
    - ${DOCKERDIR:-/opt/docker}/appdata/promtail:/etc/promtail
    - /var/log:/var/log
    # - /var/lib/docker/containers:/var/lib/docker/containers:ro

#   prowlarr-exporter:
#     command:
#     - prowlarr
#     container_name: prowlarr-exporter
#     environment:
#       APIKEY: $PROWLARR_API_KEY
#       ENABLE_ADDITIONAL_METRICS: true
#       PORT: 9710
#       URL: http://prowlarr:9696
#     image: ghcr.io/onedr0p/exportarr:latest
#     networks:
#     - t2_proxy
#     ports:
#     - 9710:9710
#     profiles:
#     - all
#     - apps
#     restart: unless-stopped

#   radarr-exporter:
#     command:
#     - radarr
#     container_name: radarr-exporter
#     environment:
#       APIKEY: $RADARR_API_KEY
#       ENABLE_ADDITIONAL_METRICS: true
#       PORT: 9707
#       URL: http://radarr:7878
#     image: ghcr.io/onedr0p/exportarr:latest
#     networks:
#     - t2_proxy
#     ports:
#     - 9707:9707
#     profiles:
#     - all
#     - metrics
#     - arrs
#     restart: "no"

#   readarr-exporter:
#     command:
#     - readarr
#     container_name: readarr-exporter
#     environment:
#       APIKEY: $READARR_API_KEY
#       ENABLE_ADDITIONAL_METRICS: true
#       PORT: 9716
#       URL: http://readarr:8787
#     image: ghcr.io/onedr0p/exportarr:latest
#     networks:
#     - t2_proxy
#     ports:
#     - 9716:9716
#     profiles:
#     - all
#     - metrics
#     - arrs
#     restart: "no"

#   sabnzbd-exporter:
#     command:
#     - sabnzbd
#     container_name: sabnzbd-exporter
#     environment:
#       APIKEY: $SABNZBD_API_KEY
#       ENABLE_ADDITIONAL_METRICS: true
#       PORT: 9712
#       URL: http://sabnzbd:8080
#     image: ghcr.io/onedr0p/exportarr:latest
#     networks:
#     - t2_proxy
#     ports:
#     - 9712:9712
#     profiles:
#     - all
#     - downloads
#     restart: unless-stopped

#   sonarr-exporter:
#     command:
#     - sonarr
#     container_name: sonarr-exporter
#     environment:
#       APIKEY: $SONARR_API_KEY
#       ENABLE_ADDITIONAL_METRICS: true
#       PORT: 9708
#       URL: http://sonarr:8989
#     image: ghcr.io/onedr0p/exportarr:latest
#     networks:
#     - t2_proxy
#     ports:
#     - 9708:9708
#     profiles:
#     - all
#     - metrics
#     - arrs
#     restart: "no"
